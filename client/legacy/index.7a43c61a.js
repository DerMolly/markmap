import './web.url.bf352adb.js';
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, a as space, c as create_component, e as element, t as text, q as query_selector_all, b as detach_dev, f as claim_space, g as claim_component, h as claim_element, j as children, k as claim_text, l as add_location, m as attr_dev, n as insert_dev, o as mount_component, p as append_dev, r as noop, u as transition_in, w as transition_out, x as destroy_component } from './client.3c303c7e.js';
import { M as Markmap_1 } from './markmap.e7e9f6df.js';
import { H as Header, F as Footer } from './footer.258c6a18.js';

/* src/routes/index.svelte generated by Svelte v3.29.0 */
const file = "src/routes/index.svelte";

function create_fragment(ctx) {
	let t0;
	let header;
	let t1;
	let main;
	let h1;
	let em0;
	let t2;
	let t3;
	let h2;
	let em1;
	let t4;
	let t5;
	let em2;
	let t6;
	let t7;
	let markmap;
	let t8;
	let p0;
	let t9;
	let t10;
	let p1;
	let strong;
	let t11;
	let t12;
	let p2;
	let a;
	let t13;
	let t14;
	let footer;
	let current;
	header = new Header({ $$inline: true });

	markmap = new Markmap_1({
			props: {
				content: /*content*/ ctx[0],
				style: "width: 100%; height: 300px"
			},
			$$inline: true
		});

	footer = new Footer({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			create_component(header.$$.fragment);
			t1 = space();
			main = element("main");
			h1 = element("h1");
			em0 = element("em");
			t2 = text("markmap");
			t3 = space();
			h2 = element("h2");
			em1 = element("em");
			t4 = text("mark");
			t5 = text("down + mind");
			em2 = element("em");
			t6 = text("map");
			t7 = space();
			create_component(markmap.$$.fragment);
			t8 = space();
			p0 = element("p");
			t9 = text("Mark it up!");
			t10 = space();
			p1 = element("p");
			strong = element("strong");
			t11 = text("Visualize your Markdown with mindmaps");
			t12 = space();
			p2 = element("p");
			a = element("a");
			t13 = text("Try it out →");
			t14 = space();
			create_component(footer.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-14oh7yw\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			claim_component(header.$$.fragment, nodes);
			t1 = claim_space(nodes);
			main = claim_element(nodes, "MAIN", { class: true });
			var main_nodes = children(main);
			h1 = claim_element(main_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			em0 = claim_element(h1_nodes, "EM", {});
			var em0_nodes = children(em0);
			t2 = claim_text(em0_nodes, "markmap");
			em0_nodes.forEach(detach_dev);
			h1_nodes.forEach(detach_dev);
			t3 = claim_space(main_nodes);
			h2 = claim_element(main_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			em1 = claim_element(h2_nodes, "EM", {});
			var em1_nodes = children(em1);
			t4 = claim_text(em1_nodes, "mark");
			em1_nodes.forEach(detach_dev);
			t5 = claim_text(h2_nodes, "down + mind");
			em2 = claim_element(h2_nodes, "EM", {});
			var em2_nodes = children(em2);
			t6 = claim_text(em2_nodes, "map");
			em2_nodes.forEach(detach_dev);
			h2_nodes.forEach(detach_dev);
			t7 = claim_space(main_nodes);
			claim_component(markmap.$$.fragment, main_nodes);
			t8 = claim_space(main_nodes);
			p0 = claim_element(main_nodes, "P", {});
			var p0_nodes = children(p0);
			t9 = claim_text(p0_nodes, "Mark it up!");
			p0_nodes.forEach(detach_dev);
			t10 = claim_space(main_nodes);
			p1 = claim_element(main_nodes, "P", {});
			var p1_nodes = children(p1);
			strong = claim_element(p1_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t11 = claim_text(strong_nodes, "Visualize your Markdown with mindmaps");
			strong_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			t12 = claim_space(main_nodes);
			p2 = claim_element(main_nodes, "P", {});
			var p2_nodes = children(p2);
			a = claim_element(p2_nodes, "A", { href: true });
			var a_nodes = children(a);
			t13 = claim_text(a_nodes, "Try it out →");
			a_nodes.forEach(detach_dev);
			p2_nodes.forEach(detach_dev);
			main_nodes.forEach(detach_dev);
			t14 = claim_space(nodes);
			claim_component(footer.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "markmap";
			add_location(em0, file, 21, 38, 374);
			attr_dev(h1, "class", "text-6xl font-bold mb-2");
			add_location(h1, file, 21, 2, 338);
			add_location(em1, file, 22, 40, 436);
			add_location(em2, file, 22, 64, 460);
			attr_dev(h2, "class", "text-3xl font-medium mb-2");
			add_location(h2, file, 22, 2, 398);
			add_location(p0, file, 25, 2, 548);
			add_location(strong, file, 27, 5, 573);
			add_location(p1, file, 27, 2, 570);
			attr_dev(a, "href", "repl");
			add_location(a, file, 28, 5, 637);
			add_location(p2, file, 28, 2, 634);
			attr_dev(main, "class", "home inner");
			add_location(main, file, 20, 0, 310);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			mount_component(header, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, main, anchor);
			append_dev(main, h1);
			append_dev(h1, em0);
			append_dev(em0, t2);
			append_dev(main, t3);
			append_dev(main, h2);
			append_dev(h2, em1);
			append_dev(em1, t4);
			append_dev(h2, t5);
			append_dev(h2, em2);
			append_dev(em2, t6);
			append_dev(main, t7);
			mount_component(markmap, main, null);
			append_dev(main, t8);
			append_dev(main, p0);
			append_dev(p0, t9);
			append_dev(main, t10);
			append_dev(main, p1);
			append_dev(p1, strong);
			append_dev(strong, t11);
			append_dev(main, t12);
			append_dev(main, p2);
			append_dev(p2, a);
			append_dev(a, t13);
			insert_dev(target, t14, anchor);
			mount_component(footer, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(header.$$.fragment, local);
			transition_in(markmap.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(header.$$.fragment, local);
			transition_out(markmap.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			destroy_component(header, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(main);
			destroy_component(markmap);
			if (detaching) detach_dev(t14);
			destroy_component(footer, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);

	const content = `\
# markmap

- great
- useful
- easy
- interactive
`;

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Header, Markmap: Markmap_1, Footer, content });
	return [content];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
