import './web.url.bf352adb.js';
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, a as space, e as element, t as text, c as create_component, q as query_selector_all, b as detach_dev, f as claim_space, g as claim_element, h as children, j as claim_text, k as claim_component, l as add_location, m as attr_dev, n as insert_dev, o as append_dev, p as mount_component, r as noop, u as transition_in, w as transition_out, x as destroy_component } from './client.85fdf1b6.js';
import { M as Markmap_1 } from './markmap.c3a66d52.js';

/* src/routes/index.svelte generated by Svelte v3.29.0 */
const file = "src/routes/index.svelte";

function create_fragment(ctx) {
	let t0;
	let div;
	let h1;
	let em0;
	let t1;
	let t2;
	let em1;
	let t3;
	let t4;
	let h2;
	let em2;
	let t5;
	let t6;
	let em3;
	let t7;
	let t8;
	let em4;
	let t9;
	let t10;
	let t11;
	let markmap;
	let t12;
	let p0;
	let t13;
	let t14;
	let p1;
	let strong;
	let t15;
	let t16;
	let p2;
	let a;
	let t17;
	let current;

	markmap = new Markmap_1({
			props: {
				content: /*content*/ ctx[0],
				style: "width: 100%; height: 300px"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			div = element("div");
			h1 = element("h1");
			em0 = element("em");
			t1 = text("markmap");
			t2 = text("-");
			em1 = element("em");
			t3 = text("lib");
			t4 = space();
			h2 = element("h2");
			em2 = element("em");
			t5 = text("mark");
			t6 = text("down + mind");
			em3 = element("em");
			t7 = text("map");
			t8 = text(" + ");
			em4 = element("em");
			t9 = text("lib");
			t10 = text("rary");
			t11 = space();
			create_component(markmap.$$.fragment);
			t12 = space();
			p0 = element("p");
			t13 = text("Mark it up!");
			t14 = space();
			p1 = element("p");
			strong = element("strong");
			t15 = text("Visualize your Markdown with mindmaps");
			t16 = space();
			p2 = element("p");
			a = element("a");
			t17 = text("Try it out →");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1o6ot5x\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			em0 = claim_element(h1_nodes, "EM", {});
			var em0_nodes = children(em0);
			t1 = claim_text(em0_nodes, "markmap");
			em0_nodes.forEach(detach_dev);
			t2 = claim_text(h1_nodes, "-");
			em1 = claim_element(h1_nodes, "EM", {});
			var em1_nodes = children(em1);
			t3 = claim_text(em1_nodes, "lib");
			em1_nodes.forEach(detach_dev);
			h1_nodes.forEach(detach_dev);
			t4 = claim_space(div_nodes);
			h2 = claim_element(div_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			em2 = claim_element(h2_nodes, "EM", {});
			var em2_nodes = children(em2);
			t5 = claim_text(em2_nodes, "mark");
			em2_nodes.forEach(detach_dev);
			t6 = claim_text(h2_nodes, "down + mind");
			em3 = claim_element(h2_nodes, "EM", {});
			var em3_nodes = children(em3);
			t7 = claim_text(em3_nodes, "map");
			em3_nodes.forEach(detach_dev);
			t8 = claim_text(h2_nodes, " + ");
			em4 = claim_element(h2_nodes, "EM", {});
			var em4_nodes = children(em4);
			t9 = claim_text(em4_nodes, "lib");
			em4_nodes.forEach(detach_dev);
			t10 = claim_text(h2_nodes, "rary");
			h2_nodes.forEach(detach_dev);
			t11 = claim_space(div_nodes);
			claim_component(markmap.$$.fragment, div_nodes);
			t12 = claim_space(div_nodes);
			p0 = claim_element(div_nodes, "P", {});
			var p0_nodes = children(p0);
			t13 = claim_text(p0_nodes, "Mark it up!");
			p0_nodes.forEach(detach_dev);
			t14 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", {});
			var p1_nodes = children(p1);
			strong = claim_element(p1_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t15 = claim_text(strong_nodes, "Visualize your Markdown with mindmaps");
			strong_nodes.forEach(detach_dev);
			p1_nodes.forEach(detach_dev);
			t16 = claim_space(div_nodes);
			p2 = claim_element(div_nodes, "P", {});
			var p2_nodes = children(p2);
			a = claim_element(p2_nodes, "A", { href: true });
			var a_nodes = children(a);
			t17 = claim_text(a_nodes, "Try it out →");
			a_nodes.forEach(detach_dev);
			p2_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "markmap-lib";
			add_location(em0, file, 18, 36, 261);
			add_location(em1, file, 18, 53, 278);
			attr_dev(h1, "class", "text-6xl font-bold mb-2");
			add_location(h1, file, 18, 0, 225);
			add_location(em2, file, 19, 38, 334);
			add_location(em3, file, 19, 62, 358);
			add_location(em4, file, 19, 77, 373);
			attr_dev(h2, "class", "text-3xl font-medium mb-2");
			add_location(h2, file, 19, 0, 296);
			add_location(p0, file, 22, 0, 461);
			add_location(strong, file, 24, 3, 484);
			add_location(p1, file, 24, 0, 481);
			attr_dev(a, "href", "repl");
			add_location(a, file, 25, 3, 546);
			add_location(p2, file, 25, 0, 543);
			attr_dev(div, "class", "home");
			add_location(div, file, 17, 0, 206);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(h1, em0);
			append_dev(em0, t1);
			append_dev(h1, t2);
			append_dev(h1, em1);
			append_dev(em1, t3);
			append_dev(div, t4);
			append_dev(div, h2);
			append_dev(h2, em2);
			append_dev(em2, t5);
			append_dev(h2, t6);
			append_dev(h2, em3);
			append_dev(em3, t7);
			append_dev(h2, t8);
			append_dev(h2, em4);
			append_dev(em4, t9);
			append_dev(h2, t10);
			append_dev(div, t11);
			mount_component(markmap, div, null);
			append_dev(div, t12);
			append_dev(div, p0);
			append_dev(p0, t13);
			append_dev(div, t14);
			append_dev(div, p1);
			append_dev(p1, strong);
			append_dev(strong, t15);
			append_dev(div, t16);
			append_dev(div, p2);
			append_dev(p2, a);
			append_dev(a, t17);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(markmap.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(markmap.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_component(markmap);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);

	const content = `\
# markmap-lib

- great
- useful
- easy
- interactive
`;

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Markmap: Markmap_1, content });
	return [content];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
