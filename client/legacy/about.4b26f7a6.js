import 'core-js/modules/es.regexp.exec';
import 'core-js/modules/es.string.replace';
import 'core-js/modules/es.string.search';
import 'core-js/modules/es.symbol';
import 'core-js/modules/es.symbol.description';
import 'core-js/modules/es.symbol.iterator';
import 'core-js/modules/es.array.filter';
import 'core-js/modules/es.array.for-each';
import 'core-js/modules/es.array.iterator';
import 'core-js/modules/es.array.map';
import 'core-js/modules/es.array.reduce';
import 'core-js/modules/es.array.slice';
import 'core-js/modules/es.array.some';
import 'core-js/modules/es.date.to-string';
import 'core-js/modules/es.function.name';
import 'core-js/modules/es.object.create';
import 'core-js/modules/es.object.to-string';
import 'core-js/modules/es.promise';
import 'core-js/modules/es.regexp.to-string';
import 'core-js/modules/es.string.iterator';
import 'core-js/modules/es.string.match';
import 'core-js/modules/es.string.split';
import 'core-js/modules/es.string.starts-with';
import 'core-js/modules/web.dom-collections.for-each';
import 'core-js/modules/web.dom-collections.iterator';
import 'core-js/modules/web.timers';
import 'core-js/modules/web.url';
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, g as claim_element, h as children, b as detach_dev, m as attr_dev, N as set_style, l as add_location, n as insert_dev, O as listen_dev, t as text, a as space, P as empty, j as claim_text, f as claim_space, o as append_dev, Q as prevent_default, r as noop, R as run_all, c as create_component, q as query_selector_all, k as claim_component, p as mount_component, u as transition_in, w as transition_out, x as destroy_component } from './client.77f152cb.js';
import 'core-js/modules/es.array.concat';
import 'core-js/modules/es.array.fill';
import 'core-js/modules/es.array.from';
import 'core-js/modules/es.array.index-of';
import 'core-js/modules/es.array.join';
import 'core-js/modules/es.array.splice';
import 'core-js/modules/es.date.now';
import 'core-js/modules/es.map';
import 'core-js/modules/es.object.assign';
import 'core-js/modules/es.object.get-own-property-descriptors';
import 'core-js/modules/es.object.keys';
import 'core-js/modules/es.parse-int';
import 'core-js/modules/es.set';
import 'core-js/modules/es.string.anchor';
import 'core-js/modules/es.array.is-array';

/* src/components/donate.svelte generated by Svelte v3.24.1 */

const file = "src/components/donate.svelte";

// (33:0) {#if active}
function create_if_block(ctx) {
	let div;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true, style: true });
			var div_nodes = children(div);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "donate-image");
			set_style(div, "background-image", "url(" + /*qrcodes*/ ctx[1][/*active*/ ctx[0]] + ")");
			add_location(div, file, 33, 0, 905);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (!mounted) {
				dispose = listen_dev(div, "click", /*click_handler_2*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*active*/ 1) {
				set_style(div, "background-image", "url(" + /*qrcodes*/ ctx[1][/*active*/ ctx[0]] + ")");
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(33:0) {#if active}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div1;
	let a0;
	let div0;
	let t0;
	let t1;
	let a1;
	let img0;
	let img0_src_value;
	let t2;
	let a2;
	let img1;
	let img1_src_value;
	let a2_class_value;
	let t3;
	let a3;
	let img2;
	let img2_src_value;
	let a3_class_value;
	let t4;
	let if_block_anchor;
	let mounted;
	let dispose;
	let if_block = /*active*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			a0 = element("a");
			div0 = element("div");
			t0 = text("Patreon");
			t1 = space();
			a1 = element("a");
			img0 = element("img");
			t2 = space();
			a2 = element("a");
			img1 = element("img");
			t3 = space();
			a3 = element("a");
			img2 = element("img");
			t4 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			a0 = claim_element(div1_nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true
			});

			var a0_nodes = children(a0);
			div0 = claim_element(a0_nodes, "DIV", {});
			var div0_nodes = children(div0);
			t0 = claim_text(div0_nodes, "Patreon");
			div0_nodes.forEach(detach_dev);
			a0_nodes.forEach(detach_dev);
			t1 = claim_space(div1_nodes);

			a1 = claim_element(div1_nodes, "A", {
				class: true,
				href: true,
				target: true,
				rel: true
			});

			var a1_nodes = children(a1);
			img0 = claim_element(a1_nodes, "IMG", { src: true });
			a1_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			a2 = claim_element(div1_nodes, "A", { class: true, href: true });
			var a2_nodes = children(a2);
			img1 = claim_element(a2_nodes, "IMG", { src: true });
			a2_nodes.forEach(detach_dev);
			t3 = claim_space(div1_nodes);
			a3 = claim_element(div1_nodes, "A", { class: true, href: true });
			var a3_nodes = children(a3);
			img2 = claim_element(a3_nodes, "IMG", { src: true });
			a3_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			add_location(div0, file, 12, 4, 336);
			attr_dev(a0, "class", "donate-group");
			attr_dev(a0, "href", "https://www.patreon.com/gera2ld");
			attr_dev(a0, "target", "_blank");
			attr_dev(a0, "rel", "noreferrer noopener");
			add_location(a0, file, 11, 2, 226);
			if (img0.src !== (img0_src_value = "donate/paypal.svg")) attr_dev(img0, "src", img0_src_value);
			add_location(img0, file, 15, 4, 474);
			attr_dev(a1, "class", "donate-group");
			attr_dev(a1, "href", "https://www.paypal.me/gera2ld/5");
			attr_dev(a1, "target", "_blank");
			attr_dev(a1, "rel", "noopener noreferrer");
			add_location(a1, file, 14, 2, 364);
			if (img1.src !== (img1_src_value = "donate/alipay.svg")) attr_dev(img1, "src", img1_src_value);
			add_location(img1, file, 22, 4, 660);
			attr_dev(a2, "class", a2_class_value = `donate-group ${/*active*/ ctx[0] === ALIPAY ? "active" : ""}`);
			attr_dev(a2, "href", "#");
			add_location(a2, file, 17, 2, 515);
			if (img2.src !== (img2_src_value = "donate/wechat.svg")) attr_dev(img2, "src", img2_src_value);
			add_location(img2, file, 29, 4, 846);
			attr_dev(a3, "class", a3_class_value = `donate-group ${/*active*/ ctx[0] === WECHAT ? "active" : ""}`);
			attr_dev(a3, "href", "#");
			add_location(a3, file, 24, 2, 701);
			attr_dev(div1, "class", "flex text-center mt-6 mb-2 overflow-x-auto");
			add_location(div1, file, 10, 0, 167);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, a0);
			append_dev(a0, div0);
			append_dev(div0, t0);
			append_dev(div1, t1);
			append_dev(div1, a1);
			append_dev(a1, img0);
			append_dev(div1, t2);
			append_dev(div1, a2);
			append_dev(a2, img1);
			append_dev(div1, t3);
			append_dev(div1, a3);
			append_dev(a3, img2);
			insert_dev(target, t4, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(a2, "click", prevent_default(/*click_handler*/ ctx[2]), false, true, false),
					listen_dev(a3, "click", prevent_default(/*click_handler_1*/ ctx[3]), false, true, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*active*/ 1 && a2_class_value !== (a2_class_value = `donate-group ${/*active*/ ctx[0] === ALIPAY ? "active" : ""}`)) {
				attr_dev(a2, "class", a2_class_value);
			}

			if (dirty & /*active*/ 1 && a3_class_value !== (a3_class_value = `donate-group ${/*active*/ ctx[0] === WECHAT ? "active" : ""}`)) {
				attr_dev(a3, "class", a3_class_value);
			}

			if (/*active*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t4);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const ALIPAY = "ap";
const WECHAT = "we";

function instance($$self, $$props, $$invalidate) {
	let active;

	const qrcodes = {
		[ALIPAY]: "donate/qr_alipay.png",
		[WECHAT]: "donate/qr_wechat.png"
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Donate> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Donate", $$slots, []);

	const click_handler = () => {
		$$invalidate(0, active = ALIPAY);
	};

	const click_handler_1 = () => {
		$$invalidate(0, active = WECHAT);
	};

	const click_handler_2 = () => {
		$$invalidate(0, active = null);
	};

	$$self.$capture_state = () => ({ active, ALIPAY, WECHAT, qrcodes });

	$$self.$inject_state = $$props => {
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [active, qrcodes, click_handler, click_handler_1, click_handler_2];
}

class Donate extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Donate",
			options,
			id: create_fragment.name
		});
	}
}

/* src/routes/about.svelte generated by Svelte v3.24.1 */
const file$1 = "src/routes/about.svelte";

function create_fragment$1(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let p0;
	let t3;
	let a;
	let t4;
	let t5;
	let t6;
	let p1;
	let strong0;
	let t7;
	let t8;
	let strong1;
	let t9;
	let t10;
	let t11;
	let h2;
	let t12;
	let t13;
	let p2;
	let t14;
	let t15;
	let donate;
	let current;
	donate = new Donate({ $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("About markmap-lib");
			t2 = space();
			p0 = element("p");
			t3 = text("Markmap is a combination of Markdown syntax and mindmap. It is first implemented by ");
			a = element("a");
			t4 = text("markmap");
			t5 = text(".");
			t6 = space();
			p1 = element("p");
			strong0 = element("strong");
			t7 = text("markmap-lib");
			t8 = text(" is a reimplementation of ");
			strong1 = element("strong");
			t9 = text("markmap");
			t10 = text(", with some additional features.");
			t11 = space();
			h2 = element("h2");
			t12 = text("Donation");
			t13 = space();
			p2 = element("p");
			t14 = text("If this project is helpful to you, please consider to buy me a coffee.");
			t15 = space();
			create_component(donate.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1ine71f\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "About markmap-lib");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t3 = claim_text(p0_nodes, "Markmap is a combination of Markdown syntax and mindmap. It is first implemented by ");
			a = claim_element(p0_nodes, "A", { href: true, target: true, rel: true });
			var a_nodes = children(a);
			t4 = claim_text(a_nodes, "markmap");
			a_nodes.forEach(detach_dev);
			t5 = claim_text(p0_nodes, ".");
			p0_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			strong0 = claim_element(p1_nodes, "STRONG", {});
			var strong0_nodes = children(strong0);
			t7 = claim_text(strong0_nodes, "markmap-lib");
			strong0_nodes.forEach(detach_dev);
			t8 = claim_text(p1_nodes, " is a reimplementation of ");
			strong1 = claim_element(p1_nodes, "STRONG", {});
			var strong1_nodes = children(strong1);
			t9 = claim_text(strong1_nodes, "markmap");
			strong1_nodes.forEach(detach_dev);
			t10 = claim_text(p1_nodes, ", with some additional features.");
			p1_nodes.forEach(detach_dev);
			t11 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t12 = claim_text(h2_nodes, "Donation");
			h2_nodes.forEach(detach_dev);
			t13 = claim_space(nodes);
			p2 = claim_element(nodes, "P", {});
			var p2_nodes = children(p2);
			t14 = claim_text(p2_nodes, "If this project is helpful to you, please consider to buy me a coffee.");
			p2_nodes.forEach(detach_dev);
			t15 = claim_space(nodes);
			claim_component(donate.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "About";
			add_location(h1, file$1, 8, 0, 122);
			attr_dev(a, "href", "https://github.com/dundalek/markmap");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "rel", "noreferrer noopener");
			add_location(a, file$1, 10, 87, 237);
			add_location(p0, file$1, 10, 0, 150);
			add_location(strong0, file$1, 11, 3, 345);
			add_location(strong1, file$1, 11, 57, 399);
			add_location(p1, file$1, 11, 0, 342);
			attr_dev(h2, "class", "mt-2");
			add_location(h2, file$1, 13, 0, 461);
			add_location(p2, file$1, 15, 0, 493);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t3);
			append_dev(p0, a);
			append_dev(a, t4);
			append_dev(p0, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, strong0);
			append_dev(strong0, t7);
			append_dev(p1, t8);
			append_dev(p1, strong1);
			append_dev(strong1, t9);
			append_dev(p1, t10);
			insert_dev(target, t11, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t12);
			insert_dev(target, t13, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t14);
			insert_dev(target, t15, anchor);
			mount_component(donate, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(donate.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(donate.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t13);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t15);
			destroy_component(donate, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<About> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("About", $$slots, []);
	$$self.$capture_state = () => ({ Donate });
	return [];
}

class About extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "About",
			options,
			id: create_fragment$1.name
		});
	}
}

export default About;
