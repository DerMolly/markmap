import './web.url.bf352adb.js';
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, F as onMount, e as element, g as claim_element, h as children, b as detach_dev, m as attr_dev, l as add_location, n as insert_dev, r as noop, I as binding_callbacks } from './client.317fb8e7.js';
import { u as util } from './markmap.5428ef28.js';

var usage = "<h1 id=\"usage\">Usage</h1>\n<p><img src=\"https://img.shields.io/npm/v/markmap-lib.svg\" alt=\"NPM\">\n<img src=\"https://img.shields.io/npm/l/markmap-lib.svg\" alt=\"License\">\n<img src=\"https://img.shields.io/npm/dt/markmap-lib.svg\" alt=\"Downloads\"></p>\n<h2 id=\"installation\">Installation</h2>\n<pre><code class=\"language-sh\">$ yarn add markmap-lib\n# or\n$ npm install markmap-lib</code></pre>\n<p>You can also use with <code>npx</code> without installation:</p>\n<pre><code class=\"language-sh\">$ npx markmap-lib</code></pre>\n<h2 id=\"command-line-usage\">Command-line Usage</h2>\n<pre><code>Usage: markmap [options] &lt;input&gt;\n\nCreate a markmap from a Markdown input file\n\nOptions:\n  -V, --version          output the version number\n  -o, --output &lt;output&gt;  specify filename of the output HTML\n  --enable-mathjax       enable MathJax support\n  --enable-prism         enable PrismJS support\n  --no-open              do not open the output file after generation\n  -w, --watch            watch the input file and update output on the fly, note that this feature is for development only\n  -h, --help             display help for command</code></pre>\n<h3 id=\"creating-a-markmap\">Creating a markmap</h3>\n<p>Suppose we have a Markdown file named <code>note.md</code>.</p>\n<p>Run the following command to get an interactive mindmap:</p>\n<pre><code class=\"language-bash\">$ markmap note.md\n\n# without global installation\n$ npx markmap-lib note.md</code></pre>\n<p>Then we get <code>note.html</code> in the same directory, and hopefully it will be open in your default browser.</p>\n<h3 id=\"watching-changes\">Watching changes</h3>\n<p>Enable watching mode by <code>-w</code>:</p>\n<pre><code class=\"language-sh\">$ markmap -w note.md</code></pre>\n<p>A markmap will be created and opened in your browser, and will be updated as soon as changes are saved to the source file.</p>\n<h2 id=\"api\">API</h2>\n<h3 id=\"transform\">Transform</h3>\n<p>Transform Markdown to markmap data:</p>\n<pre><code class=\"language-js\">import { transform } from &#39;markmap-lib/dist/transform&#39;;\n\nconst data = transform(markdown);</code></pre>\n<p>Now we get the data for rendering in <code>data</code>.</p>\n<h3 id=\"render\">Render</h3>\n<p>Render a markmap from transformed data:</p>\n<p>Create an SVG element with explicit width and height:</p>\n<pre><code class=\"language-html\">&lt;svg id=&quot;markmap&quot; style=&quot;width: 800px; height: 800px&quot;&gt;&lt;/svg&gt;</code></pre>\n<p>Render a markmap to the SVG element:</p>\n<pre><code class=\"language-js\">import { Markmap } from &#39;markmap-lib/dist/view&#39;;\n\nMarkmap.create(&#39;#markmap&#39;, null, data);\n\n// or pass an SVG element directly\nconst svgEl = document.querySelector(&#39;#markmap&#39;);\nMarkmap.create(svgEl, null, data);</code></pre>\n<h2 id=\"plugins\">Plugins</h2>\n<ul>\n<li><code>mathJax</code> - MathJax</li>\n<li><code>prism</code> - PrismJS</li>\n</ul>\n<h3 id=\"command-line\">Command-line</h3>\n<p>To enable plugins in command line, just add the related option, for example:</p>\n<pre><code class=\"language-bash\">$ markmap note.md --enable-mathjax --enable-prism</code></pre>\n<h3 id=\"api-1\">API</h3>\n<p><code>loadPlugins</code> loads necessary CSS and JavaScript files.</p>\n<pre><code class=\"language-js\">import { Markmap, loadPlugins } from &#39;markmap-lib/dist/view&#39;;\n\nloadPlugins([\n  &#39;mathJax&#39;,\n  &#39;prism&#39;,\n])\n.then(() =&gt; {\n  Markmap.create(&#39;#markmap&#39;, null, data);\n});</code></pre>\n<p>MathJax options can be changed in the second parameter:</p>\n<pre><code class=\"language-js\">loadPlugins([\n  &#39;mathJax&#39;,\n  &#39;prism&#39;,\n], {\n  mathJax: {\n    tex: {\n      inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\\\(&#39;,&#39;\\\\)&#39;]],\n    },\n  },\n});</code></pre>\n<h2 id=\"related\">Related</h2>\n<ul>\n<li>Use with Vim / Neovim: <a href=\"https://github.com/gera2ld/coc-markmap\">coc-markmap</a></li>\n<li>Use with GatsbyJS: <a href=\"https://github.com/gera2ld/gatsby-remark-markmap\">gatsby-remark-markmap</a></li>\n</ul>\n";

/* src/routes/usage.svelte generated by Svelte v3.29.0 */
const file = "src/routes/usage.svelte";

function create_fragment(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "markdown");
			add_location(div, file, 38, 0, 783);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			div.innerHTML = usage;
			/*div_binding*/ ctx[1](div);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			/*div_binding*/ ctx[1](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const loading =  (async () => {
	await util.loadJS([
		{
			type: "script",
			data: {
				src: "https://cdn.jsdelivr.net/npm/prismjs@1/components/prism-core.min.js"
			}
		}
	]);

	// components will be added by paths relative to path of autoloader
	await util.loadJS([
		{
			type: "script",
			data: {
				src: "https://cdn.jsdelivr.net/npm/prismjs@1/plugins/autoloader/prism-autoloader.min.js"
			}
		}
	]);
})();

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Usage", slots, []);
	let main;

	onMount(async () => {
		await loading;
		window.Prism.highlightAllUnder(main);
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Usage> was created with unknown prop '${key}'`);
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			main = $$value;
			$$invalidate(0, main);
		});
	}

	$$self.$capture_state = () => ({ loadJS: util.loadJS, loading, onMount, usage, main });

	$$self.$inject_state = $$props => {
		if ("main" in $$props) $$invalidate(0, main = $$props.main);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [main, div_binding];
}

class Usage extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Usage",
			options,
			id: create_fragment.name
		});
	}
}

export default Usage;
